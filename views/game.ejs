<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>Mind game</title>

    <style>
        body {
            -webkit-user-select: none; /* Safari */        
            -moz-user-select: none; /* Firefox */
            -ms-user-select: none; /* IE10+/Edge */
            user-select: none; /* Standard */
        }

        #game {
            display: none;
        }

        #player-list {
            height:170px;
        }

        .other-player {
            display:inline-block;
            border: 1px solid black;
            color:black;
            padding: 15px;
            margin: 5px;

            font-size: 16px;

            background-color:pink;
        }

        .other-player-card {
            width: 30px;
            height: 30px;
            padding: 15px;
            margin: 5px;
            font-size: 20px;
            font-weight:normal;
        }

        .other-player-card.show {
            border: 1px solid black;
            color:black;
            background-color:sandybrown;
        }

        .other-player-card.show.unknown {
            background-color:palegreen;
        }

        .other-player-card.show.unknown::after {
            content: "?";
        }

        #user-played-card {
            height:70px;
        }

        .deck-card {
            display:inline-block;
            width: 30px;
            height: 30px;
            border: 1px solid black;
            color:black;
            padding: 15px;
            margin: 5px;

            font-size: 20px;

            background-color:khaki;
        }

        .played-card {
            display:inline-block;
            width: 30px;
            height: 30px;
            padding: 15px;
            margin: 5px;
            
            font-size: 20px;
            
            background-color:sandybrown;

            color:red;
            border: 2px solid red;
            font-weight: bold;
        }

        .user-card {
            display:inline-block;
            width: 30px;
            height: 30px;
            border: 1px solid black;
            color:black;
            padding: 15px;
            margin: 5px;
            
            font-size: 20px;
            font-weight:normal;
            
            background-color:palegreen;
        }

        .selected {
            color:red;
            border: 2px solid red;
            font-weight: bold;
        }
    </style>

</head>
<body>
    <script src="/socket.io/socket.io.js"></script>
    <script src="/public/js/jquery-3.5.1.min.js"></script>

    <script>
        var gameExecuteList = new Array();
        var gameHost = '<%=game.host%>';
        var username = '<%=username%>';
        var socket;
        var game;
        var gameLock = false;


        // Screen Layout process
        var displayBoard = () => {
            $("#lobby").html("");
            $("#lobby").css("display", "none");

            $("#game").css("display", "block");

            displayOtherPlayers();
            displayCurrentCards();
            displayUserPoints();
            displayCards();

        }

        var displayUserPoints = () => {
            var playerArr = game.players.filter((p) => { return p.name == username; });
            if(playerArr.length == 0) {
                return;
            }

            $("#game #user-points").html(playerArr[0].points);
        }

        var displayCards = () => {

            var currentPlayerArr = game.players.filter((p) => { return p.name == username });
            if(currentPlayerArr.length ==0) {
                return;
            }
            var currentPlayer = currentPlayerArr[0];

            // remove used cards
            var $toRemoveList = new Array();
            var $userCards = $("#game #user-cards").find(".user-card");
            for(var i=0; i< $userCards.length; i++) {
                $card = $($userCards[i]);
                if(!currentPlayer.cards.includes($card.attr("data-card-no"))) {
                    $card.remove();
                } else {
                    if(isCardPlayed($card.attr("data-card-no"))) {
                        $card.remove();
                    }
                }
            }

            // add not used cards
            currentPlayer.cards.forEach((c) => {
                displayOneCard(c);
            });
        }

        var displayOneCard = (card) => {
            if(isCardPlayed(card)) {
                return;
            }

            var $cardItem = $("#game #user-cards").find("[data-card-no=" + card + "]");
            if($cardItem.length == 0) {
                $cardItem = $("<span/>");
                $cardItem.click(userCardClick);
                $("#game #user-cards").append($cardItem);
            }
            
            $cardItem.attr("data-card-no", card);
            $cardItem.addClass("user-card");
            $cardItem.html(card);
        }

        var isCardPlayed = (card) => {
            var $playedCard = getPlayedCard();
            if($playedCard.lenght == 0) {
                return false;
            }
            if($playedCard.attr("data-card-no") == card) {
                return true;
            }
            return false;
        }

        var getPlayedCard = () => {
            return $("#user-played-card").find(".played-card");
        }

        var getUserCard = (card) => {
            return $("#game #user-cards").find(".user-card[data-card-no='" + card + "']");
        }

        var displayOtherPlayers = () => {
            game.players.filter((p) => { return p.name != username }).forEach(p => {
                displayOneOtherPlayer(p.name);
            });
        };

        var displayOneOtherPlayer = (playername) => {

            if(!game) {
                return;
            }

            var players = game.players.filter((p) => { return p.name == playername });
            if(players.length == 0) {
                return;
            }

            var player = players[0];
            
            // get element
            var $playerItem = $("#game #player-list").find("[data-player-name=" + player.name + "]");
            if($playerItem.length == 0) {
                $playerItem = $("<div/>");
                $playerItem.attr("data-player-name", player.name);
                $playerItem.addClass("other-player");

                $("#game #player-list").append($playerItem);
            }

            // set name
            var playerNameDisplay;
            if(player.status == 1) {
                // connected
                if(player.currentCard != "") {
                    // card played
                    playerNameDisplay = player.name;
                    $playerItem.css('font-style', '');
                } else {
                    // card played
                    playerNameDisplay = player.name + "<BR>(choosing card ...)";
                    $playerItem.css('font-style', 'italic');
                }
            } else {
                // not connected
                playerNameDisplay = player.name + "<BR>(disconnected ...)";
                $playerItem.css('font-style', 'italic');
            }

            // add points
            playerNameDisplay = playerNameDisplay + "<BR>Points:<span class='other-player-points'>" + player.points + "</span>";
            $playerItem.html(playerNameDisplay);

            var $playerCardItem = $playerItem.find(".other-player-card");
            if($playerCardItem.length == 0) {
                $playerCardItem = $("<div/>");
                $playerCardItem.addClass("other-player-card");
                $playerCardItem.html("");

                $playerItem.append($playerCardItem);
            }

            if(player.currentCard != "") {
                $playerCardItem.addClass("show");
                $playerCardItem.addClass("unknown");
            }

        };

        var displayCurrentCards = () => {
            $("#game #playing-cards").html("");
            game.currentCards.forEach((c) => {
                $card = $("<div/>");
                $card.html(c);
                $card.addClass("deck-card");
                $("#game #playing-cards").append($card);
            });

            $cardsLeft = $("<div/>");
            $cardsLeft.html("(" + (game.deck.length + 1) + " cards left)");
            $("#game #playing-cards").append($cardsLeft);
        }

        var displayLobbyPlayer = (playername) => {

            if(!game) {
                return;
            }

            var players = game.players.filter((p) => { return p.name == playername });
            if(players.length == 0) {
                return;
            }

            var player = players[0];

            $playerItem = $("#lobby #player-list ul").find("[data-player-name=" + player.name + "]");
            if($playerItem.length == 0) {
                $playerItem = $("<li/>");
                $playerItem.attr("data-player-name", player.name);
                $("#lobby #player-list ul").append($playerItem);
            }
            
            if(player.status == 1) {
                // connected
                $playerItem.html(player.name);
                $playerItem.css('font-style', '');
            } else {
                // not connected
                $playerItem.html(player.name + " (disconnected ...)");
                $playerItem.css('font-style', 'italic');
            }
        }

        // -------------------------------
        // -------------------------------

        // game loop
        var gameExecutionLoop;
        var setGameExecutionLoop = () => {
            gameExecutionLoop = setInterval(function(){
                if(gameExecuteList.length > 0) {
                    gameExecuteList.shift()();
                }
            }, 200);
        }
        setGameExecutionLoop();

        // -------------------------------
        // -------------------------------

        // Start button process
        var btnStartClick = () => {
            if(gameLock) {
                return;
            }

            gameExecuteList.push(() => {
                socket.emit('gameStart');
            });
        };

        // Leave button process
        var btnLeaveClick = () => {
            if(gameLock) {
                return;
            }
            
            gameExecuteList.push(() => {
                clearInterval(gameExecutionLoop);
                socket.emit('playerLeave');
                window.location.href = "/";
            });
        };

        // Card Click
        var userCardClick = (event) => {
            if(gameLock) {
                return;
            }
            
            gameExecuteList.push(() => {
                var $target = $(event.target);

                if($target.hasClass("selected")){
                    $(".user-card").removeClass("selected");
                    togglePlayedCard($target);
                } else {
                    $(".user-card").removeClass("selected");
                    $target.addClass("selected");
                }
            });
        }

        var togglePlayedCard = ($card) => {
            
            $("#game #user-played-card").html("");

            var card = $card.attr("data-card-no");
            
            var $cardItem = $("<span/>");
            $cardItem.attr("data-card-no", card);
            $cardItem.html(card);
            $cardItem.addClass("played-card");
            $("#game #user-played-card").append($cardItem);

            displayCards();
            
            socket.emit('playCard', card);
        }

        // -------------------------------
        // -------------------------------

        // play card process
        var socketPlayCard = (data) => {
            gameExecuteList.push(() => {
                game = data.game;
                displayOtherPlayers();
            });
        };

        // play card process
        var socketTurnAllCardsPlayed = (data) => {
            gameExecuteList.push(() => {
                game = data;
                displayOtherPlayersCard();
                
                // gameLock = true;
                // clearInterval(gameExecutionLoop);
                setTimeout(()=> {
                    // gameLock = false;
                    // setGameExecutionLoop();
                    // resetOtherPlayersCard();
                    displayOtherPlayers();
                    displayCurrentCards();
                    displayUserPoints();
                    clearPlayedCard();
                    
                }, 2500);

            });
        };

        var clearPlayedCard = () => {
            $("#user-played-card").html("");
        }

        // 
        // var resetOtherPlayersCard = () => {
        //     gameExecuteList.push(() => {
        //         game.players.filter((p) => { return p.name != username }).forEach((p) => {
        //             var $card = getOtherPlayerCardEle(p.name);;
        //             $card.removeClass("show");
        //             $card.html(p.previousCard);
        //         });
        //     });
        // }

        // 
        var displayOtherPlayersCard = () => {
            gameExecuteList.push(() => {
                game.players.filter((p) => { return p.name != username }).forEach((p) => {
                    var $card = getOtherPlayerCardEle(p.name);;
                    $card.removeClass("unknown");
                    $card.html(p.previousCard);
                });
            });
        }

        var getOtherPlayerCardEle = (playerName) => {
            var $cards = $("#game #player-list").find("[data-player-name='" + playerName + "']").find(".other-player-card");
            if($cards.length == 0) {
                return undefined;
            }
            return $($cards[0]);
        }

        // Start game process
        var socketGameStart = (socketGame) => {
            gameExecuteList.push(() => {
                game = socketGame;
                displayBoard();
            });
        };

        // Player join process
        var socketPlayerJoin = (infos) => {
            gameExecuteList.push(() => {
                game = infos.game;
                displayLobbyPlayer(infos.data.username);
            });
        };

        // Player diconnect process
        var socketPlayerDisconnect = (infos) => {
            gameExecuteList.push(() => {
                game = infos.game;
                displayLobbyPlayer(infos.data.username);
            });
        };

        // Player leave process
        var socketPlayerLeave = (infos) => {
            gameExecuteList.push(() => {
                game = infos.game;
                $("#lobby #player-list ul").find("[data-player-name=" + infos.data.username + "]").remove();
            });
        };

        // Error process
        var socketError = (data) => {
            gameExecuteList.push(() => {
                clearInterval(gameExecutionLoop);
                alert(JSON.stringify(data));
                window.location.href = "/game?host=" + game.host;
            });
        }

        // -------------------------------
        // -------------------------------

        $(document).ready(() => {

            // Init socket
            socket = io();

            // Init game variable
            game = JSON.parse('<%- JSON.stringify(game) %>');

            // Window events
            window.onbeforeunload = function (e) {
                clearInterval(gameExecutionLoop);
                socket.emit('playerDisconnect');
            };
            
            // Socket events
            socket.on('err', socketError);
            socket.on('playerJoin', socketPlayerJoin);
            socket.on('playerLeave', socketPlayerLeave);
            socket.on('playerDisconnect', socketPlayerDisconnect);
            socket.on('gameStart', socketGameStart);
            socket.on('playCard', socketPlayCard);
            socket.on('turnAllCardsPlayed', socketTurnAllCardsPlayed);

            // UI events
            $("#btn-start").click(btnStartClick);
            $("#btn-leave").click(btnLeaveClick);

            if(game.status == 1) {
                // If game is started, display game
                gameExecuteList.push(displayBoard);
            } else {
                // If game is not started, send join event
                gameExecuteList.push(() => {
                    socket.emit('playerJoin', { gameHost:gameHost, username:username });
                });
            }
        });


    </script>

    <div id="lobby">
        <div>welcome to the game of <%=game.host %> !</div>
        <div>Waiting for the host to start the game ...</div>
        <% if (username == game.host) { %>
            <div>
                <button id="btn-start">Start Game</button>
            </div>
        <% } %>
        <div>
            <button id="btn-leave">Leave</button>
        </div>
        <div>List of players in the game</div>
        <div id="player-list">
            <ul>
                <% var i =1; %>
                <% game.players.forEach((p) => { %>
                    <li data-player-name="<%=p.name %>">
                        <%=p.name %>
                    </li>
                    <% i++; %>
                <% }); %>
            </ul>
        </div>
        
    </div>

    <div id="game">
        <div style="font-weight: bold;">Player list :</div>
        <div id="player-list">
        </div>

        <hr/>

        <div style="font-weight: bold;">Current card :</div>
        <div id="playing-cards">
        </div>

        <hr/>

        <div style="font-weight: bold;">Your cards :</div>
        <div style="font-weight: bold;">Your points :<span id="user-points"></span></div>

        <div id="user-played-card">
        </div>
        <div id="user-cards">
        </div>
    </div>





</body>